package com.example.backend.controllers;

import com.example.backend.DTO.TextToSpeechRequest;
import com.example.backend.DTO.VoiceAnalysisResponse;
import com.example.backend.services.VoiceCoachService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@RestController
@RequestMapping("/api/voice")
@CrossOrigin(origins = "http://localhost:4200")
public class VoiceCoachController {

    @Autowired
    private VoiceCoachService voiceCoachService;

    /**
     * Analyze pronunciation from audio recording using Gemini AI
     * 
     * @param file Audio file (webm, mp3, wav, etc.)
     * @param originalText The text the user was supposed to read
     * @return Analysis results with score and feedback powered by Google Gemini
     */
    @PostMapping("/analyze")
    public ResponseEntity<?> analyzePronunciation(
            @RequestParam("file") MultipartFile file,
            @RequestParam("originalText") String originalText) {
        try {
            // Validate inputs
            if (file.isEmpty()) {
                return ResponseEntity.badRequest().body("Audio file is required");
            }
            if (originalText == null || originalText.trim().isEmpty()) {
                return ResponseEntity.badRequest().body("Original text is required");
            }

            // Analyze pronunciation
            VoiceAnalysisResponse result = voiceCoachService.analyzePronunciation(file, originalText);

            // If transcription missing, return a gentle message with tips
            if (result == null || result.getTranscription() == null || result.getTranscription().trim().isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body("Could not transcribe the audio. Please try a short, clear recording (webm/wav/mp3) and check your microphone.");
            }
            if (result.getFeedback() == null || result.getFeedback().isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body("Gemini API could not generate feedback. Please check API key and quotas.");
            }

            return ResponseEntity.ok(result);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error processing audio: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Unexpected error: " + e.getMessage());
        }
    }

    /**
     * Generate text-to-speech audio for example pronunciation using Google TTS
     * 
     * @param request Contains the text to convert to speech
     * @return Audio file (MP3) generated by Google Cloud Text-to-Speech
     */
    @PostMapping("/text-to-speech")
    public ResponseEntity<?> generateTextToSpeech(@RequestBody TextToSpeechRequest request) {
        
        try {
            // Validate input
            if (request.getText() == null || request.getText().trim().isEmpty()) {
                return ResponseEntity.badRequest().body("Text is required");
            }

            // Generate audio
            byte[] audioData = voiceCoachService.generateTextToSpeech(request.getText());

            // Return audio file
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.parseMediaType("audio/mpeg"));
            headers.setContentLength(audioData.length);
            headers.set(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"speech.mp3\"");

            return new ResponseEntity<>(audioData, headers, HttpStatus.OK);
            
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error generating speech: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Unexpected error: " + e.getMessage());
        }
    }

    /**
     * Health check endpoint
     */
    @GetMapping("/health")
    public String health() {
        return "âœ… Voice API is running!";
    }
}
